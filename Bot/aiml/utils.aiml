<?xml version='1.0' encoding='UTF-8'?>
<aiml version='2.1'>
	<!-- Usage: XItem [n] [list ...] -->
	<!-- Returns the nth element of the list. -->
	<category>
		<pattern>XItem 1 * ^</pattern>
		<template><star index='1'/></template>
	</category>
	<category>
		<pattern>XItem 2 * * ^</pattern>
		<template><star index='2'/></template>
	</category>
	<category>
		<pattern>XItem 3 * * * ^</pattern>
		<template><star index='3'/></template>
	</category>
	<category>
		<pattern>XItem 4 * * * * ^</pattern>
		<template><star index='4'/></template>
	</category>
	<category>
		<pattern>XItem 5 * * * * * ^</pattern>
		<template><star index='5'/></template>
	</category>
	<category>
		<pattern>XItem 6 * * * * * * ^</pattern>
		<template><star index='6'/></template>
	</category>
	<category>
		<pattern>XItem <set>number</set> ^</pattern>
		<template>
			<think>
				<set var='i'><star/></set>
				<set var='list'><star index='2'/></set>
			</think>
			<condition var='i'>
				<li value='0'>nil</li>
				<li value='1'><srai>XFirst <get var='list'/></srai></li>
				<li>
					<think>
						<set var='list'><srai>XRest <get var='list'/></srai></set>
						<set var='i'>
							<condition var='list'>
								<li value='nil'>1</li>
								<li><map name='predecessor'><get var='i'/></map></li>
							</condition>
						</set>
					</think>
					<loop/>
				</li>
			</condition>
		</template>
	</category>

	<!-- Usage: XSkip [n] XS [list ...] -->
	<!-- Returns the portion of the list after the first n elements, or nil if there are at most n elements. -->
	<category>
		<pattern>XSkip <set>number</set> XS ^</pattern>
		<template>
			<think>
				<set var='i'><star/></set>
				<set var='list'><star index='2'/></set>
			</think>
			<condition var='i'>
				<li value='0'><get var='list'/></li>
				<li>
					<think>
						<set var='list'><srai>XRest <get var='list'/></srai></set>
						<set var='i'>
							<condition var='list'>
								<li value='nil'>1</li>
								<li><map name='predecessor'><get var='i'/></map></li>
							</condition>
						</set>
					</think>
					<loop/>
				</li>
			</condition>
		</template>
	</category>

	<!-- Usage: XTake [n] XS [list ...] -->
	<!-- Returns the first n elements of the list, or the entire list if there are not n elements. -->
	<category>
		<pattern>XTake <set>number</set> XS</pattern>
		<template>nil</template>
	</category>
	<category>
		<pattern>XTake <set>number</set> XS nil</pattern>
		<template>nil</template>
	</category>
	<category>
		<pattern>XTake <set>number</set> XS *</pattern>
		<template>
			<think>
				<set var='i'><star/></set>
				<set var='list'><star index='2'/></set>
			</think>
			<condition var='i'>
				<li value='0'></li>
				<li>
					<condition var='list'>
						<li value='nil'><think><set var='i'>0</set></think></li>
						<li>
							<srai>XFirst <get var='list'/></srai>
							<think>
								<set var='list'><srai>XRest <get var='list'/></srai></set>
								<set var='i'><map name='predecessor'><get var='i'/></map></set>
							</think>
						</li>
					</condition>
					<loop/>
				</li>
			</condition>
		</template>
	</category>

	<!-- Usage: XCount [list ...] -->
	<!-- Returns the number of elements in the list. -->
	<category>
		<pattern>XCount</pattern>
		<template>0</template>
	</category>
	<category>
		<pattern>XCount nil</pattern>
		<template>0</template>
	</category>
	<category>
		<pattern>XCount *</pattern>
		<template>1</template>
	</category>
	<category>
		<pattern>XCount * *</pattern>
		<template>2</template>
	</category>
	<category>
		<pattern>XCount * * *</pattern>
		<template>3</template>
	</category>
	<category>
		<pattern>XCount * * * *</pattern>
		<template>4</template>
	</category>
	<category>
		<pattern>XCount * * * * *</pattern>
		<template>5</template>
	</category>
	<category>
		<pattern>XCount * * * * * *</pattern>
		<template>6</template>
	</category>
	<category>
		<pattern>XCount * * * * * * *</pattern>
		<template>7</template>
	</category>
	<category>
		<pattern>XCount * * * * * * * *</pattern>
		<template>8</template>
	</category>
	<category>
		<pattern>XCount * * * * * * * * *</pattern>
		<template>9</template>
	</category>
	<category>
		<pattern>XCount * * * * * * * * * *</pattern>
		<template>
			<think>
				<set var='result'>9</set>
				<set var='list'><star index='10'/></set>
				<condition var='list'>
					<li value='nil'></li>
					<li>
						<set var='list'><rest><get var='list'/></rest></set>
						<set var='result'><map name='successor'><get var='result'/></map></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='result'/>
		</template>
	</category>


	<!-- Usage: XContains [element] XS [list ...] -->
	<!-- Returns true if the element is in the list; false otherwise. -->
	<category>
		<pattern>XContains * XS</pattern>
		<template>false</template>
	</category>
	<category>
		<pattern>XContains * XS *</pattern>
		<template>
			<think><set var='needle'><star/></set></think>
			<condition var='needle'>
				<li><value><star index='2'/></value>true</li>
				<li>false</li>
			</condition>
		</template>
	</category>
	<category>
		<pattern>XContains * XS * *</pattern>
		<template>
			<think><set var='needle'><star/></set></think>
			<condition var='needle'>
				<li><value><star index='2'/></value>true</li>
				<li><value><star index='3'/></value>true</li>
				<li>false</li>
			</condition>
		</template>
	</category>
	<category>
		<pattern>XContains * XS * * *</pattern>
		<template>
			<think><set var='needle'><star/></set></think>
			<condition var='needle'>
				<li><value><star index='2'/></value>true</li>
				<li><value><star index='3'/></value>true</li>
				<li><value><star index='4'/></value>true</li>
				<li>false</li>
			</condition>
		</template>
	</category>
	<category>
		<pattern>XContains * XS * * * *</pattern>
		<template>
			<think><set var='needle'><star/></set></think>
			<condition var='needle'>
				<li><value><star index='2'/></value>true</li>
				<li><value><star index='3'/></value>true</li>
				<li><value><star index='4'/></value>true</li>
				<li><value><star index='5'/></value>true</li>
				<li>false</li>
			</condition>
		</template>
	</category>
	<category>
		<pattern>XContains * XS * * * * *</pattern>
		<template>
			<think><set var='needle'><star/></set></think>
			<condition var='needle'>
				<li><value><star index='2'/></value>true</li>
				<li><value><star index='3'/></value>true</li>
				<li><value><star index='4'/></value>true</li>
				<li><value><star index='5'/></value>true</li>
				<li><value><star index='6'/></value>true</li>
				<li>false</li>
			</condition>
		</template>
	</category>
	<category>
		<pattern>XContains * XS * * * * * * ^</pattern>
		<template>
			<think><set var='needle'><star/></set></think>
			<condition var='needle'>
				<li><value><star index='2'/></value>true</li>
				<li><value><star index='3'/></value>true</li>
				<li><value><star index='4'/></value>true</li>
				<li><value><star index='5'/></value>true</li>
				<li><value><star index='6'/></value>true</li>
				<li><value><star index='7'/></value>true</li>
				<li><srai>XContains <star/> <star index='8'/></srai></li>
			</condition>
		</template>
	</category>

	<!-- Usage: XFirst [list ...] -->
	<!-- Returns the first word of the list (equivalent to Program AB's <first> tag). -->
	<category>
		<pattern>XFirst * ^</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XFirst</pattern>
		<template>nil</template>
	</category>

	<!-- Usage: XRest [list ...] -->
	<!-- Returns the part of the list after the first word (equivalent to Program AB's <rest> tag). -->
	<category>
		<pattern>XRest _ *</pattern>
		<template><star index='2'/></template>
	</category>
	<category>
		<pattern>XRest ^</pattern>
		<template>nil</template>
	</category>

	<!-- Usage: XLast [list ...] -->
	<!-- Returns the last word of the list. -->
	<category>
		<pattern>XLast</pattern>
		<template>nil</template>
	</category>
	<category>
		<pattern>XLast *</pattern>
		<template>
			<think>
				<set var='items'><star/></set>
				<set var='rest'><rest><get var='items'/></rest></set>
				<condition var='rest'>
					<li value='nil'></li>
					<li>
						<set var='items'><get var='rest'/></set>
						<set var='rest'><rest><get var='items'/></rest></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='items'/>
		</template>
	</category>

	<!-- Usage: XPrepend [element] [list ...] -->
	<!-- Returns the list with the specified element prepended. -->
	<category>
		<pattern>XPrepend * nil</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XPrepend * ^</pattern>
		<template><star/> <star index='2'/></template>
	</category>

	<!-- Usage: XAppend [element] XS [list ...] -->
	<!-- Returns the list with the specified element appended. If the list is nil, unknown or the empty string, returns only the new element. -->
	<category>
		<pattern>XAppend * XS ^</pattern>
		<template><srai>XCoalesce <star index='2'/> XS</srai> <star/></template>
	</category>

	<!-- Usage: XReplace [n] [replacement] [list ...] -->
	<!-- Replaces the nth element with the specified replacement. -->
	<category>
		<pattern>XReplace <set>number</set> * ^</pattern>
		<template>
			<think>
				<set var='n'><star/></set>
				<set var='list'><star index='3'/></set>
			</think>
			<condition var='list'>
				<li value='nil'></li>
				<li><condition var='n'>
						<li value='1'><star index='2'/></li>
						<li><srai>XFirst <get var='list'/></srai></li>
					</condition><think>
						<set var='n'><map name='predecessor'><get var='n'/></map></set>
						<set var='list'><srai>XRest <get var='list'/></srai></set>
					</think>
					<loop/>
				</li>
			</condition>
		</template>
	</category>

	<!-- Usage: XRemove [n] [list ...] -->
	<!-- Removes the nth element of the list. -->
	<category>
		<pattern>XRemove <set>number</set> ^</pattern>
		<template>
			<think>
				<set var='n'><star/></set>
				<set var='list'><star index='2'/></set>
			</think>
			<condition var='list'>
				<li value='nil'></li>
				<li><condition var='n'>
						<li value='1'></li>
						<li><srai>XFirst <get var='list'/></srai> </li>
					</condition><think>
						<set var='n'><map name='predecessor'><get var='n'/></map></set>
						<set var='list'><srai>XRest <get var='list'/></srai></set>
					</think><loop/></li>
			</condition>
		</template>
	</category>

	<!-- Usage: XRemoveMatch [element] [list ...] -->
	<!-- Removes the first occurrence of the specified element of the list. -->
	<category>
		<pattern>XRemoveMatch * ^</pattern>
		<template>
			<think><set var='list'><star index='2'/></set></think>
			<condition var='list'>
				<li value='nil'></li>
				<li>
					<think>
						<set var='e'><srai>XFirst <get var='list'/></srai></set>
						<set var='list'><srai>XRest <get var='list'/></srai></set>
					</think>
					<condition var='e'>
						<li><value><star/></value>
							<condition var='list'>
								<li value='nil'></li>
								<li>
									<get var='list'/>
									<think><set var='list'>nil</set></think>
								</li>
							</condition>
						</li>
						<li><get var='e'/></li>
					</condition>
					<loop/>
				</li>
			</condition>
		</template>
	</category>

	<!-- Usage: XImplode [list ...] -->
	<!-- Returns the list with spaces removed. -->
	<category>
		<pattern>XImplode * *</pattern>
		<template><star/><srai>XImplode <star index='2'/></srai></template>
	</category>
	<category>
		<pattern>XImplode *</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XImplode</pattern>
		<template></template>
	</category>

	<!-- Usage: XCommaJoin [list ...] -or- XCommaJoin [element] (XS [element])+ -->
	<!-- Returns the list elements separated by commas. -->
	<category>
		<pattern>XCommaJoin * *</pattern>
		<template><star/>, <srai>XCommaJoin <star index='2'/></srai></template>
	</category>
	<category>
		<pattern>XCommaJoin _ XS *</pattern>
		<template><star/>, <srai>XCommaJoin2 <star index='2'/></srai></template>
	</category>
	<category>
		<pattern>XCommaJoin2 * XS *</pattern>
		<template><star/>, <srai>XCommaJoin <star index='2'/></srai></template>
	</category>
	<category>
		<pattern>XCommaJoin *</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XCommaJoin2 *</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XCommaJoin</pattern>
		<template>nil</template>
	</category>

	<!-- Usage: XJoin [delimiter] XS [list ...] -->
	<!-- Returns the list elements separated by the delimiter. -->
	<category>
		<pattern>XJoin _ XS * *</pattern>
		<template><star index='2'/> <star/> <srai>XJoin <star/> XS <star index='3'/></srai></template>
	</category>
	<category>
		<pattern>XJoin _ XS *</pattern>
		<template><star index='2'/></template>
	</category>

	<category>
		<pattern>XImplode *</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XImplode * *</pattern>
		<template><star/><srai>XImplode <star index='2'/></srai></template>
	</category>

	<!-- Usage: XCountMatch [element] [list ...] -->
	<!-- Returns the number of times the specified element occurs in the list. -->
	<category>
		<pattern>XCountMatch *</pattern>
		<template>0</template>
	</category>
	<category>
		<pattern>XCountMatch * *</pattern>
		<template>
			<think>
				<set var='list'><star index='2'/></set>
				<set var='count'>0</set>
				<set var='needle'><star/></set>
				<condition var='list'>
					<li value='nil'></li>
					<li>
						<condition var='needle'>
							<value><srai>XFirst <get var='list'/></srai></value>
							<set var='count'><map name='successor'><get var='count'/></map></set>
						</condition>
						<set var='list'><srai>XRest <get var='list'/></srai></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='count'/>
		</template>
	</category>

	<!-- Usage: XIndex [element] XS [list ...] -->
	<!-- Returns the index of the first occurrence of the specified element in the list, or 0 if not found. -->
	<category>
		<pattern>XIndex * XS</pattern>
		<template>0</template>
	</category>
	<category>
		<pattern>XIndex * XS *</pattern>
		<template>
			<think>
				<set var='list'><star index='2'/></set>
				<set var='index'>1</set>
				<set var='result'>0</set>
				<set var='needle'><star/></set>
				<condition var='list'>
					<li value='nil'></li>
					<li>
						<condition var='needle'>
							<li>
								<value><srai>XFirst <get var='list'/></srai></value>
								<set var='result'><get var='index'/></set>
								<set var='list'>nil</set>
							</li>
							<li>
								<set var='list'><srai>XRest <get var='list'/></srai></set>
								<set var='index'><map name='successor'><get var='index'/></map></set>
							</li>
						</condition>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='result'/>
		</template>
	</category>

	<!-- Usage: XLastIndex [element] [list ...] -->
	<!-- Returns the index of the last occurrence of the specified element in the list, or 0 if not found. -->
	<category>
		<pattern>XLastIndex *</pattern>
		<template>0</template>
	</category>
	<category>
		<pattern>XLastIndex * *</pattern>
		<template>
			<think>
				<set var='list'><star index='2'/></set>
				<set var='result'>0</set>
				<set var='i'>1</set>
				<set var='needle'><star/></set>
				<condition var='list'>
					<li value='nil'></li>
					<li>
						<condition var='needle'>
							<value><srai>XFirst <get var='list'/></srai></value>
							<set var='result'><get var='i'/></set>
						</condition>
						<set var='list'><srai>XRest <get var='list'/></srai></set>
						<set var='i'><map name='successor'><get var='i'/></map></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='result'/>
		</template>
	</category>

	<!-- Usage: XNot [a] -->
	<!-- Returns false if a is true; true otherwise. -->
	<category>
		<pattern>XNot false</pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>XNot true</pattern>
		<template>false</template>
	</category>
	<category>
		<pattern>XNot *</pattern>
		<template>unknown</template>
	</category>

	<!-- Usage: XAnd [a] XS [b] XS ... -->
	<!-- Returns true if all parameters are true; false otherwise. -->
	<category>
		<pattern>XAnd true</pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>XAnd false</pattern>
		<template>false</template>
	</category>
	<category>
		<pattern>XAnd true XS *</pattern>
		<template><srai>XAnd <star/></srai></template>
	</category>
	<category>
		<pattern>XAnd false XS *</pattern>
		<template>false</template>
	</category>

	<!-- Usage: XOr [a] XS [b] XS ... -->
	<!-- Returns true if any parameter is true; false otherwise. -->
	<category>
		<pattern>XOr true</pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>XOr false</pattern>
		<template>false</template>
	</category>
	<category>
		<pattern>XOr true XS *</pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>XOr false XS *</pattern>
		<template><srai>XOr <star/></srai></template>
	</category>

	<!-- Usage: XXor [a] XS [b] XS ... -->
	<!-- Returns true if an odd number of parameters are true; false otherwise. -->
	<category>
		<pattern>XXor true</pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>XXor false</pattern>
		<template>false</template>
	</category>
	<category>
		<pattern>XXor true XS *</pattern>
		<template><srai>XNot <srai>XXor <star/></srai></srai></template>
	</category>
	<category>
		<pattern>XXor false XS *</pattern>
		<template><srai>XXor <star/></srai></template>
	</category>

	<!-- Usage: XEq [a] XS [b] -->
	<!-- Returns true if a and b match; false otherwise. -->
	<category>
		<pattern>XEq * XS *</pattern>
		<template>
			<think><set var='a'><star/></set></think>
			<condition var='a'>
				<li><value><star index='2'/></value>true</li>
				<li>false</li>
			</condition>
		</template>
	</category>
	<!-- Usage: XNEq [a] XS [b] -->
	<!-- Returns false if a and b match; true otherwise. -->
	<category>
		<pattern>XNEq * XS *</pattern>
		<template><srai>XNot <srai>XEq <star/> XS <star index='2'/></srai></srai></template>
	</category>

	<!-- Usage: XCompare [a] XS [b] -->
	<!-- Returns -1 if a < b, 0 if a = b, 1 if a > b. O(log max(a, b)). a and b must be non-negative. -->
	<category>
		<pattern>XCompare * XS *</pattern>
		<template>
			<think>
				<set var='a'><explode><star/></explode></set>
				<set var='b'><explode><star index='2'/></explode></set>
				<set var='c'><srai>XCompareDigits <srai>XCount <get var='a'/></srai> XS <srai>XCount <get var='b'/></srai></srai></set>
				<condition var='c'>
					<li value='0'>
						<condition var='result'>
							<li value='*'></li>
							<li>
								<condition var='a'>
									<li value='nil'><set var='result'>0</set></li>
									<li>
										<set var='ad'><first><get var='a'/></first></set>
										<set var='a'><rest><get var='a'/></rest></set>
										<set var='bd'><first><get var='b'/></first></set>
										<set var='b'><rest><get var='b'/></rest></set>
										<set var='c'><srai>XCompareDigits <get var='ad'/> XS <get var='bd'/></srai></set>
										<condition var='c'>
											<li value='0'></li>
											<li><set var='result'><get var='c'/></set></li>
										</condition>
									</li>
								</condition>
								<loop/>
							</li>
						</condition>
					</li>
					<li><set var='result'><get var='c'/></set></li>
				</condition>
			</think>
			<get var='result'/>
		</template>
	</category>

	<!-- Usage: XCompareDigits [a] XS [b] -->
	<!-- Returns -1 if a < b, 0 if a = b, 1 if a > b. O(max(a, b)). a and b must be non-negative. -->
	<category>
		<pattern>XCompareDigits * XS *</pattern>
		<template>
			<think>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
			</think>
			<condition>
				<li var='a' value='0'>
					<condition var='b'>
						<li value='0'>0</li>
						<li>-1</li>
					</condition>
				</li>
				<li var='b' value='0'>1</li>
				<li>
					<think>
						<set var='a'><map name='predecessor'><get var='a'/></map></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
					</think>
					<loop/>
				</li>
			</condition>
		</template>
	</category>

	<category>
		<pattern>IsDigit <set>number</set></pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>IsDigit *</pattern>
		<template>false</template>
	</category>
	<category>
		<pattern>IsLetterOrDigit <set>number</set></pattern>
		<template>digit</template>
	</category>
	<category>
		<pattern>IsLetterOrDigit *</pattern>
		<template>letter</template>
	</category>

	<category>
		<pattern>XNegate <set>number</set></pattern>
		<template>-<star/></template>
	</category>
	<category>
		<pattern>XNegate *</pattern>
		<template><srai>XImplode <srai>XRest <explode><star/></explode></srai></srai></template>
	</category>

	<!-- Usage: XIsPositive [n] -->
	<!-- Returns true if n is a positive number; false otherwise. -->
	<category><pattern>XIsPositve 0</pattern><template>false</template></category>
	<category><pattern>XIsPositve <set>number</set></pattern><template>true</template></category>
	<category><pattern>XIsPositve ^</pattern><template>false</template></category>

	<!-- Usage: XAdd [a] [b] -->
	<!-- Returns a + b. a must be a non-negative integer; b must be an integer. -->
	<category>
		<pattern>XAdd * <set>number</set></pattern>
		<template>
			<think>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
				<condition var='b'>
					<li value='0'></li>
					<li>
						<set var='a'><map name='successor'><get var='a'/></map></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='a'/>
		</template>
	</category>
	<category>
		<pattern>XAdd * *</pattern>
		<template><srai>XSubtract <star/> XS <srai>XNegate <star index='2'/></srai></srai></template>
	</category>

	<!-- Usage: XSubtract [a] XS [b] -->
	<!-- Returns a - b. a and b must both be non-negative integers. -->
	<category>
		<pattern>XSubtract * XS *</pattern>
		<template>
			<think>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
				<condition var='b'>
					<li value='0'></li>
					<li>
						<set var='a'><map name='predecessor'><get var='a'/></map></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='a'/>
		</template>
	</category>

	<!-- Usage: XMultiply [a] [b] -->
	<!-- Returns a * b. a and b must both be non-negative integers. -->
	<category>
		<pattern>XMultiply * *</pattern>
		<template>
			<think>
				<set var='a'><star/></set>
				<set var='b'><star index='2'/></set>
				<set var='product'>0</set>
				<condition var='b'>
					<li value='0'></li>
					<li>
						<set var='product'><srai>XAdd <get var='product'/> <get var='a'/></srai></set>
						<set var='b'><map name='predecessor'><get var='b'/></map></set>
						<loop/>
					</li>
				</condition>
			</think>
			<get var='product'/>
		</template>
	</category>

	<category>
		<pattern>IsNumber *</pattern>
		<template>XIsNumber <star/></template>
	</category>
	<category>
		<pattern>XIsNumber <set>number</set></pattern>
		<template>true</template>
	</category>
	<category>
		<pattern>XIsNumber *</pattern>
		<template>false</template>
	</category>

	<category>
		<pattern>XReverse *</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XReverse * *</pattern>
		<template><srai>XReverse <star index='2'/></srai> <star/></template>
	</category>

	<!-- Usage: XCoalesce [x] XS [y] -->
	<!-- Returns x unless x is 'nil', 'unknown' or the empty string; in that case returns y. y may be empty. -->
	<category>
		<pattern>XCoalesce * XS ^</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XCoalesce nil XS *</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XCoalesce unknown XS *</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XCoalesce XS *</pattern>
		<template><star/></template>
	</category>
	<category>
		<pattern>XCoalesce nil XS</pattern>
		<template></template>
	</category>
	<category>
		<pattern>XCoalesce unknown XS</pattern>
		<template></template>
	</category>
	<category>
		<pattern>XCoalesce XS</pattern>
		<template></template>
	</category>

	<category>
		<pattern>XPlural 1 *</pattern>
		<template>1 <star/></template>
	</category>
	<category>
		<pattern>XPlural <set>number</set> *</pattern>
		<template><star/> <map name='plural'><star index='2'/></map></template>
	</category>
</aiml>
